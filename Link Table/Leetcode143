class ListNode:
    def __init__(self, val=1, next=None):
        self.val = val
        self.next = next


def reorderList(head):
    if not head:
        return

    mid = middleNode(head)
    l1 = head
    l2 = mid.next
    mid.next = None
    l2 = reverseList(l2)
    mergeList(l1, l2)
    return head


def middleNode(head):
    slow = fast = head
    while fast.next and fast.next.next:
        slow = slow.next
        fast = fast.next.next
    return slow


def reverseList(head):
    prev = None
    curr = head
    while curr:
        nextTemp = curr.next
        curr.next = prev
        prev = curr
        curr = nextTemp
    return prev


def mergeList(l1, l2):
    while l1 and l2:
        l1_tmp = l1.next
        l2_tmp = l2.next

        l1.next = l2
        l1 = l1_tmp

        l2.next = l1
        l2 = l2_tmp


# 读取结点
def get_nodes(arr):
    head0 = ListNode()
    head_fixed = head0
    for i in range(len(arr)):
        new_node = ListNode(arr[i])
        head0.next = new_node
        head0 = head0.next
    return head_fixed.next  # 得到新链表的头节点


# 保存新链表为list
def save_new_nodes(new_head):
    arr_new = []
    while new_head:
        arr_new.append(new_head.val)
        new_head = new_head.next
# 打印
    print(arr_new)


if __name__ == "__main__":
    # 主函数输入列表
    arr = [1, 2, 3, 4, 5, 6]
    # 得到头节点
    headNode = get_nodes(arr)
    # 得到重排链表
    head_new = reorderList(headNode)
    # 进行保存
    save_new_nodes(head_new)
